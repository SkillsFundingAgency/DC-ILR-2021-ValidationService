
name: $(VersionNumberMajor).$(VersionNumberMinor)$(Rev:.rrrr)

resources:
- repo: self
  fetchDepth: 15

variables:
  VersionNumberMajor: '0'
  VersionNumberMinor: '1'
  BuildConfiguration: 'Release'
  BuildPlatform: 'Any CPU'
  BuildPlatformX64: 'x64'  

pool:
  name: DCT
  demands:
  - msbuild
  - visualstudio
  - vstest
  - IsBuildServer

steps:
- task: DotNetCoreInstaller@0
  displayName: 'Use .NET Core sdk 2.2.203'
  inputs:
    version: 2.2.203

- task: VisualStudioTestPlatformInstaller@1
  displayName: 'Visual Studio Test Platform Installer'
  inputs:
    versionSelector: latestStable

- task: NuGetToolInstaller@0
  displayName: 'Use NuGet < 4.8.0'
  inputs:
    versionSpec: '< 4.8.0'
    checkLatest: true

- task: gittools.gitversion.gitversion-task.GitVersion@3
  displayName: GitVersion
  inputs:
    updateAssemblyInfo: true
  enabled: false

- powershell: |
   $var = (gci env:*).GetEnumerator() | Where-Object {$_.Name -Like "*BUILD*" -or $_.Name -Like "*GITVERSION*" -or $_.Name -Like "*CI_Version*" } | Sort-Object Name
   Foreach ($v in $var) 
   {
     Write-Host "Name: " + $v.Name + " | Value : " + $v.Value
   }
  displayName: 'Display GitVersion Variables copy'
  enabled: false

- powershell: |
   Copy-Item "Cloud.xml" "Local.1Node.xml" -Force
   Copy-Item "Cloud.xml" "Local.5Node.xml" -Force  
  workingDirectory: '$(ServiceFabricApplicationParametersFolder)'
  displayName: 'Generate Fake Config Files'
  enabled: false


- task: DotNetCoreCLI@2
  enabled: true
  displayName: 'dotnet restore'
  inputs:
    command: restore
    projects: '**\*.csproj'
    vstsFeed: 'dct-pkg'
#    includeNuGetOrg: false
#    noCache: true

- task: NuGetCommand@2
  displayName: 'NuGet restore'
  inputs:
    restoreSolution: '**/*.sln'
    vstsFeed: 'dct-pkg'
    noCache: true

- task: MSBuild@1
  enabled: true
  displayName: 'Build solution **/*.sln'
  inputs:
    msbuildVersion: 16.0
    msbuildArchitecture: x64
    platform: '$(BuildPlatform)'
    configuration: '$(BuildConfiguration)'
    msbuildArguments: '-p:version=$(Build.BuildNumber) -p:FileVersion=$(Build.BuildNumber) -p:SkipInvalidConfigurations=true'
    clean: true
    maximumCpuCount: true
    restoreNugetPackages: true
    logProjectEvents: true
    createLogFile: true

- task: MSBuild@1
  enabled: true
  displayName: 'Build and Package - Service Fabric Config'
  inputs:
    solution: '**\*.sfproj'
    msbuildArchitecture: x64
    platform: '$(BuildPlatformX64)'
    configuration: '$(BuildConfiguration)'
    msbuildArguments: '/t:Package /p:PackageLocation=$(build.artifactstagingdirectory)\ServiceFabric\ApplicationPackage  /p:version=$(Build.BuildNumber) /p:FileVersion=$(Build.BuildNumber) -p:SkipInvalidConfigurations=true'
    clean: false
    maximumCpuCount: true
    logProjectEvents: true
    createLogFile: true
        
- task: DeleteFiles@1
  displayName: 'Delete Symbols files from $(build.artifactstagingdirectory)\ServiceFabric\ApplicationPackage '
  inputs:
    SourceFolder: '$(build.artifactstagingdirectory)\ServiceFabric\ApplicationPackage'
    Contents: '**\*.pdb'

- task: CopyFiles@2
  displayName: 'Copy Nuget Interface Packages Files - Artifact NugetInterface Directory'
  inputs:
    SourceFolder: '$(build.sourcesdirectory)\src'
    Contents: |
     **\*$(BuildConfiguration)*\*Interface.nupkg
     !**\packages\**
     !**\bin\x64\**
    TargetFolder: '$(build.artifactstagingdirectory)\Nuget\Interface'
    CleanTargetFolder: true
    flattenFolders: true

- task: CopyFiles@2
  displayName: 'Copy NugetPackages Files - Artifact NugetPackages Directory'
  inputs:
    SourceFolder: '$(build.sourcesdirectory)\src'
    Contents: |
     **\*$(BuildConfiguration)*\*.nupkg
     !**\packages\**
     !**\bin\x64\**
    TargetFolder: '$(build.artifactstagingdirectory)\Nuget\Packages'
    CleanTargetFolder: true
    flattenFolders: true
        
- task: CopyFiles@2
  displayName: 'Copy Database Files - Artifact Databases Directory'
  inputs:
    SourceFolder: '$(build.sourcesdirectory)'
    Contents: '**\*.dacpac'
    TargetFolder: '$(build.artifactstagingdirectory)\Databases'
    CleanTargetFolder: true
    flattenFolders: true

- task: CopyFiles@2
  displayName: 'Copy Files - $(build.artifactstagingdirectory)\ServiceFabric\PublishProfiles'
  inputs:
    SourceFolder: '$(build.sourcesdirectory)\src'
    Contents: '**\PublishProfiles\Cloud.xml'
    TargetFolder: '$(build.artifactstagingdirectory)\ServiceFabric\PublishProfiles'
    CleanTargetFolder: true
    flattenFolders: true

- task: CopyFiles@2
  displayName: 'Copy Files - $(build.artifactstagingdirectory)\ServiceFabric\ApplicationParameters'
  inputs:
    SourceFolder: '$(build.sourcesdirectory)\src'
    Contents: '**\ApplicationParameters\*.xml'
    TargetFolder: '$(build.artifactstagingdirectory)\ServiceFabric\ApplicationParameters'
    CleanTargetFolder: true
    flattenFolders: true

- task: ServiceFabricUpdateManifests@2
  displayName: 'Update Service Fabric Manifests (Manifest versions)'
  inputs:
    applicationPackagePath: '$(build.artifactstagingdirectory)\ServiceFabric\ApplicationPackage '
    versionBehavior: Replace
  enabled: true
   
- task: DotNetCoreCLI@2
  enabled: true
  displayName: 'Run xUnit Test - Core Framework'
  inputs:
    command: test
    projects: 'src/*Tests/*.csproj'
    arguments: '--configuration $(buildConfiguration) --collect "Code coverage"'
    
- task: VSTest@2
  enabled: false
  displayName: 'VsTest - testAssemblies'
  inputs:
    testAssemblyVer2: |
     **\ESFA.DC.ESF.R2.*tests.dll
     !**\*Database.Tests*\**
     !**\packages\**
     !**\obj\**
    configuration: '$(BuildConfiguration)'

- task: PublishSymbols@2
  enabled: false
  displayName: 'Publish symbols path'
  inputs:
    SearchPattern: '**\bin\**\*.pdb'
    PublishSymbols: false
  continueOnError: true

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: ServiceFabric'
  inputs:
    ArtifactName: ServiceFabric
    PathtoPublish: '$(build.artifactstagingdirectory)\ServiceFabric'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: NugetPackages'
  inputs:
    ArtifactName: NugetPackages
    PathtoPublish: '$(build.artifactstagingdirectory)\Nuget'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: Databases'
  enabled: false
  inputs:
    ArtifactName: Databases
    PathtoPublish: '$(build.artifactstagingdirectory)\Databases'
